Script bulk-stream
calling callback with response function (e, resp) {
    if (e) {
      self.emit('error', e);
    }
    if (resp && resp.errors && resp.items) {
      for (var i = 0; i < resp.items.length; i++) {
        var bulkItemResp = resp.items[i];
        var key = Object.keys(bulkItemResp)[0];
        if (bulkItemResp[key].error) {
          var err = new Error(bulkItemResp[key].error.reason || bulkItemResp[key].error);
          err.reason = bulkItemResp[key].error.reason;
          err.type = bulkItemResp[key].error.type;
          self.emit('error', err);
        }
      }
    }
    self.bulk = [];
    self.bulkCount = 0;
    self.expectingPayload = false;
    callback();
  }
calling callback with response function (e, resp) {
    if (e) {
      self.emit('error', e);
    }
    if (resp && resp.errors && resp.items) {
      for (var i = 0; i < resp.items.length; i++) {
        var bulkItemResp = resp.items[i];
        var key = Object.keys(bulkItemResp)[0];
        if (bulkItemResp[key].error) {
          var err = new Error(bulkItemResp[key].error.reason || bulkItemResp[key].error);
          err.reason = bulkItemResp[key].error.reason;
          err.type = bulkItemResp[key].error.type;
          self.emit('error', err);
        }
      }
    }
    self.bulk = [];
    self.bulkCount = 0;
    self.expectingPayload = false;
    callback();
  }
calling callback with response function (e, resp) {
    if (e) {
      self.emit('error', e);
    }
    if (resp && resp.errors && resp.items) {
      for (var i = 0; i < resp.items.length; i++) {
        var bulkItemResp = resp.items[i];
        var key = Object.keys(bulkItemResp)[0];
        if (bulkItemResp[key].error) {
          var err = new Error(bulkItemResp[key].error.reason || bulkItemResp[key].error);
          err.reason = bulkItemResp[key].error.reason;
          err.type = bulkItemResp[key].error.type;
          self.emit('error', err);
        }
      }
    }
    self.bulk = [];
    self.bulkCount = 0;
    self.expectingPayload = false;
    callback();
  }
calling callback with response function (e, resp) {
    if (e) {
      self.emit('error', e);
    }
    if (resp && resp.errors && resp.items) {
      for (var i = 0; i < resp.items.length; i++) {
        var bulkItemResp = resp.items[i];
        var key = Object.keys(bulkItemResp)[0];
        if (bulkItemResp[key].error) {
          var err = new Error(bulkItemResp[key].error.reason || bulkItemResp[key].error);
          err.reason = bulkItemResp[key].error.reason;
          err.type = bulkItemResp[key].error.type;
          self.emit('error', err);
        }
      }
    }
    self.bulk = [];
    self.bulkCount = 0;
    self.expectingPayload = false;
    callback();
  }
calling callback with response function (e, resp) {
    if (e) {
      self.emit('error', e);
    }
    if (resp && resp.errors && resp.items) {
      for (var i = 0; i < resp.items.length; i++) {
        var bulkItemResp = resp.items[i];
        var key = Object.keys(bulkItemResp)[0];
        if (bulkItemResp[key].error) {
          var err = new Error(bulkItemResp[key].error.reason || bulkItemResp[key].error);
          err.reason = bulkItemResp[key].error.reason;
          err.type = bulkItemResp[key].error.type;
          self.emit('error', err);
        }
      }
    }
    self.bulk = [];
    self.bulkCount = 0;
    self.expectingPayload = false;
    callback();
  }
go get a drink you deserve it
calling callback with response function (e, resp) {
    if (e) {
      self.emit('error', e);
    }
    if (resp && resp.errors && resp.items) {
      for (var i = 0; i < resp.items.length; i++) {
        var bulkItemResp = resp.items[i];
        var key = Object.keys(bulkItemResp)[0];
        if (bulkItemResp[key].error) {
          var err = new Error(bulkItemResp[key].error.reason || bulkItemResp[key].error);
          err.reason = bulkItemResp[key].error.reason;
          err.type = bulkItemResp[key].error.type;
          self.emit('error', err);
        }
      }
    }
    self.bulk = [];
    self.bulkCount = 0;
    self.expectingPayload = false;
    callback();
  }
